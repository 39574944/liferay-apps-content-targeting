/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.rule.engine.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the RuleEngine service. Represents a row in the &quot;RuleEngine_RuleEngine&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.content.targeting.rule.engine.model.impl.RuleEngineModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.content.targeting.rule.engine.model.impl.RuleEngineImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RuleEngine
 * @see com.liferay.content.targeting.rule.engine.model.impl.RuleEngineImpl
 * @see com.liferay.content.targeting.rule.engine.model.impl.RuleEngineModelImpl
 * @generated
 */
public interface RuleEngineModel extends BaseModel<RuleEngine> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a rule engine model instance should use the {@link RuleEngine} interface instead.
	 */

	/**
	 * Returns the primary key of this rule engine.
	 *
	 * @return the primary key of this rule engine
	 */
	long getPrimaryKey();

	/**
	 * Sets the primary key of this rule engine.
	 *
	 * @param primaryKey the primary key of this rule engine
	 */
	void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this rule engine.
	 *
	 * @return the uuid of this rule engine
	 */
	@AutoEscape
	String getUuid();

	/**
	 * Sets the uuid of this rule engine.
	 *
	 * @param uuid the uuid of this rule engine
	 */
	void setUuid(String uuid);

	/**
	 * Returns the dummy ID of this rule engine.
	 *
	 * @return the dummy ID of this rule engine
	 */
	long getDummyId();

	/**
	 * Sets the dummy ID of this rule engine.
	 *
	 * @param dummyId the dummy ID of this rule engine
	 */
	void setDummyId(long dummyId);

	@Override
	boolean isNew();

	@Override
	void setNew(boolean n);

	@Override
	boolean isCachedModel();

	@Override
	void setCachedModel(boolean cachedModel);

	@Override
	boolean isEscapedModel();

	@Override
	Serializable getPrimaryKeyObj();

	@Override
	void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	ExpandoBridge getExpandoBridge();

	@Override
	void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	Object clone();

	@Override
	int compareTo(RuleEngine ruleEngine);

	@Override
	int hashCode();

	@Override
	CacheModel<RuleEngine> toCacheModel();

	@Override
	RuleEngine toEscapedModel();

	@Override
	RuleEngine toUnescapedModel();

	@Override
	String toString();

	@Override
	String toXmlString();
}